#!/usr/bin/env python

Import("env")

thirdparty_obj = []

if env["platform"] in ["windows"] and env["use_angle"]:
    thirdparty_angle_dir = "#thirdparty/angle/"

    env.Append(CPPDEFINES=["ANGLE_ENABLED"])
    env.Append(CPPDEFINES=["EGL_ENABLED"])

    env.Append(CPPDEFINES=["GLAD_GLES2_USE_SYSTEM_EGL"])
    env.Append(CPPDEFINES=["EGL_EGLEXT_PROTOTYPES"])

    env.Prepend(CPPPATH=[thirdparty_angle_dir])


if env["platform"] in ["haiku", "osx", "windows", "x11"]:
    # Thirdparty source files
    thirdparty_glad_dir = "#thirdparty/glad/"
    thirdparty_glad_sources = []

    if env["platform"] != "windows":
        thirdparty_glad_sources += ["egl.c"]
        env.Append(CPPDEFINES=["EGL_ENABLED"])
    elif not env["use_angle"]:
        thirdparty_glad_sources += ["wgl.c"]
        env.Append(CPPDEFINES=["WGL_ENABLED"])

    if env["use_angle"]:
        thirdparty_glad_sources += ["gles2.c"]
    else:
        thirdparty_glad_sources += ["gl.c"]
        env.Append(CPPDEFINES=["GLES_OVER_GL"])

    thirdparty_sources = [thirdparty_glad_dir + file for file in thirdparty_glad_sources]

    env.Prepend(CPPPATH=[thirdparty_glad_dir])

    env_thirdparty = env.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.drivers_sources += thirdparty_obj


# Godot source files

driver_obj = []

env.add_source_files(driver_obj, "*.cpp")
env.drivers_sources += driver_obj

# Needed to force rebuilding the driver files when the thirdparty code is updated.
env.Depends(driver_obj, thirdparty_obj)
