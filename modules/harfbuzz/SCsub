#!/usr/bin/env python

Import("env")
Import("env_modules")

from compat import isbasestring

env_harfbuzz = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_harfbuzz"]:
    thirdparty_dir = "#thirdparty/harfbuzz/"
    thirdparty_sources = [
        "src/hb-blob.cc",
        "src/hb-buffer-serialize.cc",
        "src/hb-buffer-verify.cc",
        "src/hb-buffer.cc",
        "src/hb-common.cc",
        "src/hb-face-builder.cc",
        "src/hb-face.cc",
        "src/hb-fallback-shape.cc",
        "src/hb-font.cc",
        "src/hb-map.cc",
        "src/hb-number.cc",
        "src/hb-ot-cff1-table.cc",
        "src/hb-ot-cff2-table.cc",
        "src/hb-ot-color.cc",
        "src/hb-ot-face.cc",
        "src/hb-ot-font.cc",
        "src/hb-ot-layout.cc",
        "src/hb-ot-map.cc",
        "src/hb-ot-math.cc",
        "src/hb-ot-meta.cc",
        "src/hb-ot-metrics.cc",
        "src/hb-ot-name.cc",
        "src/hb-ot-shaper-arabic.cc",
        "src/hb-ot-shaper-default.cc",
        "src/hb-ot-shaper-hangul.cc",
        "src/hb-ot-shaper-hebrew.cc",
        "src/hb-ot-shaper-indic-table.cc",
        "src/hb-ot-shaper-indic.cc",
        "src/hb-ot-shaper-khmer.cc",
        "src/hb-ot-shaper-myanmar.cc",
        "src/hb-ot-shaper-syllabic.cc",
        "src/hb-ot-shaper-thai.cc",
        "src/hb-ot-shaper-use.cc",
        "src/hb-ot-shaper-vowel-constraints.cc",
        "src/hb-ot-shape-fallback.cc",
        "src/hb-ot-shape-normalize.cc",
        "src/hb-ot-shape.cc",
        "src/hb-ot-tag.cc",
        "src/hb-ot-var.cc",
        "src/hb-set.cc",
        "src/hb-shape-plan.cc",
        "src/hb-shape.cc",
        "src/hb-shaper.cc",
        "src/hb-static.cc",
        "src/hb-style.cc",
        "src/hb-ucd.cc",
        "src/hb-unicode.cc",
    ]

    if env["builtin_freetype"]:
        thirdparty_sources += ["src/hb-ft.cc"]
        env_harfbuzz.Append(CPPDEFINES=["HAVE_FREETYPE"])
        env_harfbuzz.Prepend(CPPPATH=["#thirdparty/freetype/include"])

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    if env["platform"] not in ["windows"]:
        env_harfbuzz.Append(CCFLAGS=["HAVE_PTHREAD"])

    env_harfbuzz.Prepend(CPPPATH=[thirdparty_dir + "/src"])
    # Also needed in main env for scene/
    env.Prepend(CPPPATH=[thirdparty_dir + "/src"])

    env_harfbuzz.Append(CPPDEFINES=["HB_MINI", "HB_NO_PAINT", "HB_NO_DRAW"])

    env_thirdparty = env_harfbuzz.Clone()
    env_thirdparty.disable_warnings()
    lib = env_thirdparty.add_library("harfbuzz_builtin", thirdparty_sources)
    thirdparty_obj += lib

    # Needs to be appended to arrive after libscene in the linker call,
    # but we don't want it to arrive *after* system libs, so manual hack
    # LIBS contains first SCons Library objects ("SCons.Node.FS.File object")
    # and then plain strings for system library. We insert between the two.
    inserted = False
    for idx, linklib in enumerate(env["LIBS"]):
        if isbasestring(linklib):  # first system lib such as "X11", otherwise SCons lib object
            env["LIBS"].insert(idx, lib)
            inserted = True
            break
    if not inserted:
        env.Append(LIBS=[lib])


# Godot source files

module_obj = []

env_harfbuzz.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
